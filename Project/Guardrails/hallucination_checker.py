from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity


def check_hallucination(context_chunks, generated_text, threshold=0.15):
    """
    Checks if the generated text is likely hallucinated by comparing with the context.

    Parameters:
        context_chunks (list of str): List of retrieved context passages.
        generated_text (str): The text generated by the model.
        threshold (float): Cosine similarity threshold below which the output is considered hallucinated.

    Returns:
        bool: True if hallucination is suspected, False otherwise.
    """
    context_text = " ".join(context_chunks)

    # Use TF-IDF to compute similarity
    vectorizer = TfidfVectorizer().fit([context_text, generated_text])
    vectors = vectorizer.transform([context_text, generated_text])
    sim = cosine_similarity(vectors[0:1], vectors[1:2])[0][0]

    return sim < threshold


def explain_hallucination_check(similarity_score, threshold):
    """
    Explains the hallucination likelihood based on the similarity score.

    Parameters:
        similarity_score (float): The actual similarity value.
        threshold (float): The configured cutoff for hallucination detection.

    Returns:
        str: Explanation string.
    """
    if similarity_score < threshold:
        return f"Similarity score {similarity_score:.2f} < threshold {threshold} → possible hallucination."
    return f"Similarity score {similarity_score:.2f} ≥ threshold {threshold} → contextually grounded."